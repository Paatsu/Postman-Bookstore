{
	"info": {
		"_postman_id": "51af4a7e-d04b-404e-b98b-452075e03e43",
		"name": "2.1 & 7 Add 8 different books & link writers (1 view update) (datafile required)",
		"description": "rikard_books_datafile.json required",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "preconditions",
			"item": [
				{
					"name": "GET check preconditions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7f45f90-0db0-4be8-ab13-6f3dc9d1996b",
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"// Halt if\r",
									"if (!response.length || pm.info.iterationCount !== 8) { \r",
									"    postman.setNextRequest(null);\r",
									"};\r",
									"\r",
									"pm.test('Checking preconditions for this collection', function(){\r",
									"\r",
									"    // Just to get assertion message\r",
									"    pm.expect(response.length).to.be.above(0, \r",
									"    'Missing testdata. This collection requires you run \"1.1 Add 5 different writers\" first');\r",
									"\r",
									"    // Just to get assertion message\r",
									"    pm.expect(pm.info.iterationCount).to.equal(8, \r",
									"    'Missing testdata. Please use correct datafile for this collection');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/writers/?name=Frank Herbert",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"writers",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "Frank Herbert"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "view",
			"item": [
				{
					"name": "(view) GET books and writers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a7ff381-5408-4313-af8b-828d10a248d0",
								"exec": [
									"let response = pm.response.json();\r",
									"pm.test('Checking response for GET \"books and writers\" view', function(){\r",
									"\r",
									"    // Precondition. Just to get assertion error\r",
									"    pm.expect(response.length).to.be.above(34, \r",
									"    'expected atleast 35 books and writers in response');\r",
									"\r",
									"});\r",
									"\r",
									"pm.environment.set('lastBooksAndWritersView', response);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/books_and_writers",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"books_and_writers"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "books & writers",
			"item": [
				{
					"name": "GET all books inital total",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f883186-a66e-4d30-87c2-3686001ef408",
								"exec": [
									"let response = pm.response.json();\r",
									"let sumTotal = pm.collectionVariables.get('allBooksInitialTotal');\r",
									"\r",
									"pm.test('Checking total books in DB', function(){\r",
									"\r",
									"    pm.expect(response.length).to.be.above(29, \r",
									"    'expected default database to contain atleast 30 books');\r",
									"\r",
									"});\r",
									"\r",
									"// Saving for comparison in later steps\r",
									"if (sumTotal < 0) {\r",
									"    pm.collectionVariables.set('allBooksInitialTotal', response.length);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/books",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST book",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dee803e8-9202-47f9-a75a-be5e711eca3a",
								"exec": [
									"let response = pm.response.json();\r",
									"let title = pm.iterationData.get('title');\r",
									"\r",
									"pm.test('Checking response when POST book: ' + title, function(){\r",
									"\r",
									"    pm.expect(response.lastID).to.be.a('number', \r",
									"    'response is missing assigned lastID');\r",
									"    \r",
									"    pm.expect(response.changes).to.eql(1, \r",
									"    'expected response changes 1');\r",
									"});\r",
									"\r",
									"pm.environment.set('lastBookID', response.lastID);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ISBN_nr\": \"{{ISBN_nr}}\",\n\t\"title\": \"{{title}}\",\n\t\"description\": \"{{description}}\",\n\t\"pages\": {{pages}},\n\t\"price\": {{price}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/books/",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"books",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all books (check for book)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0af6b352-2390-4846-9af0-94b96a05d376",
								"exec": [
									"let sumTotal = pm.collectionVariables.get('allBooksInitialTotal') + pm.info.iteration + 1;\r",
									"let isbn = pm.iterationData.get('ISBN_nr');\r",
									"\r",
									"let response = pm.response.json();\r",
									"pm.test('Checking total books in DB', function(){\r",
									"\r",
									"    pm.expect(response.length).to.eql(sumTotal, \r",
									"    'expected default database to contain ' + sumTotal +  ' books at this iteration');\r",
									"\r",
									"    book = response.filter(x => x.ISBN_nr === isbn);\r",
									"\r",
									"    pm.expect(book).not.to.have.lengthOf(0, \r",
									"    'expected response to contain writer added in this iteration');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/books",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET writer id by book writer (testdata custom property)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4aceb1f-637c-4799-b6f0-340df5fb2981",
								"exec": [
									"let response = pm.response.json();\r",
									"let writer = pm.iterationData.get('writer');\r",
									"\r",
									"pm.test('Checking response when GET writer id using name: ' + writer, function(){\r",
									"\r",
									"    pm.expect(response[0].id).to.be.a('number', \r",
									"    'response id not found for name:' + writer);\r",
									"\r",
									"    // Getting an array? Table \"writers\" column \"name\" should be set unique but it is not...\r",
									"});\r",
									"\r",
									"pm.environment.set('lastWriterID', response[0].id);\r",
									"\r",
									"// For use as request key value in upcoming step\r",
									"pm.collectionVariables.set(\"collectionLastWriterID\", response[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/writers/?name={{writer}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"writers",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{writer}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST booksXwriters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d2edf6c-d9ff-44b8-a912-2f0a9dce020c",
								"exec": [
									"let response = pm.response.json();\r",
									"let name = pm.iterationData.get('writer');\r",
									"let title = pm.iterationData.get('title');\r",
									"let id = pm.environment.get('lastWriterID');\r",
									"\r",
									"pm.test('Checking response when POST booksXwriters for: '  + title + ' X ' + name, function(){\r",
									"\r",
									"    pm.expect(response.lastID).to.be.a('number', \r",
									"    'response is missing assigned lastID');\r",
									"    \r",
									"    pm.expect(response.changes).to.eql(1, \r",
									"    'expected response changes 1');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"writer_id\": {{lastWriterID}},\n\t\"book_ISBN_nr\": \"{{ISBN_nr}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/booksXwriters",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"booksXwriters"
							]
						}
					},
					"response": []
				},
				{
					"name": "(X) POST booksXwriters (invalid ISBN)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ee64600-3098-4d7e-b58a-cb9f75fc15ef",
								"exec": [
									"let response = pm.response.json();\r",
									"pm.test('Checking response when POST booksXwriters for non existing book', function(){\r",
									"\r",
									"    pm.expect(response.errno).to.eql(19 , \r",
									"    'response error number should equal 19');\r",
									"    \r",
									"    pm.expect(response.code).to.eql('SQLITE_CONSTRAINT', \r",
									"    'response error code should equal SQLITE_CONSTRAINT');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"writer_id\": {{lastWriterID}},\n\t\"book_ISBN_nr\": \"238096560-5\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/booksXwriters",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"booksXwriters"
							]
						}
					},
					"response": []
				},
				{
					"name": "(X) POST booksXwriters (invalid writer)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9d9cf64-5fe8-4b40-a699-073c927c7b86",
								"exec": [
									"let response = pm.response.json();\r",
									"pm.test('Checking response when POST booksXwriters for non existing writer', function(){\r",
									"\r",
									"    pm.expect(response.errno).to.eql(19 , \r",
									"    'response error number should equal 19');\r",
									"    \r",
									"    pm.expect(response.code).to.eql('SQLITE_CONSTRAINT', \r",
									"    'response error code should equal SQLITE_CONSTRAINT');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"writer_id\": 999,\n\t\"book_ISBN_nr\": \"{{ISBN_nr}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/booksXwriters",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"booksXwriters"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET booksXwriters by ISBN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "754a15f9-cbef-4fb3-a699-2e2bda423c37",
								"exec": [
									"let response = pm.response.json();\r",
									"let name = pm.iterationData.get('writer');\r",
									"let title = pm.iterationData.get('title');\r",
									"let id = pm.environment.get('lastWriterID');\r",
									"\r",
									"pm.test('Checking response when GET booksXwriters by ISBN for: '  + title + ' X ' + name, function(){\r",
									"\r",
									"    pm.expect(response[0].writer_id).to.be.a('number', \r",
									"    'response is missing writer id');\r",
									"    \r",
									"    pm.expect(response[0].writer_id).to.eql(id, \r",
									"    'response writer id should equal previous GET writer id: ' + id + ' (' + name + ')');\r",
									"\r",
									"    // Reminder: Getting array since one writer can have many books\r",
									"});\r",
									"\r",
									"let isbn = pm.environment.set('ISBN_nr', response[0].book_ISBN_nr);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/booksXwriters/?book_ISBN_nr={{ISBN_nr}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"booksXwriters",
								""
							],
							"query": [
								{
									"key": "book_ISBN_nr",
									"value": "{{ISBN_nr}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET booksXwriters by writer id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ec39b8b-6204-482e-ac6f-4fb989b8df05",
								"exec": [
									"let response = pm.response.json();\r",
									"let name = pm.iterationData.get('writer');\r",
									"let title = pm.iterationData.get('title');\r",
									"let isbn = pm.environment.get('ISBN_nr');\r",
									"\r",
									"pm.test('Checking response when GET booksXwriters by writer id for: '  + title + ' X ' + name, function(){\r",
									"    \r",
									"    // Just for the sake of adding a test here. Unrelated to API and endpoint\r",
									"    for (let res of response) {\r",
									"        pm.expect(res.book_ISBN_nr).to.have.lengthOf.above(6, \r",
									"        'response is missing a books ISBN nr');\r",
									"    }\r",
									"\r",
									"    book = response.filter(x => x.book_ISBN_nr === isbn);\r",
									"\r",
									"    pm.expect(book).not.to.have.lengthOf(0, \r",
									"    'previous result of GET book by ISBN' + isbn + ' (' + title + ') was not found in this response');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/booksXwriters/?writer_id={{collectionLastWriterID}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"booksXwriters",
								""
							],
							"query": [
								{
									"key": "writer_id",
									"value": "{{collectionLastWriterID}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "view update",
			"item": [
				{
					"name": "(view) GET books and writers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdb51367-4888-49b2-bd87-91cbe4bacf3d",
								"exec": [
									"let booksWriters = pm.environment.get('lastBooksAndWritersView');\r",
									"\r",
									"let response = pm.response.json();\r",
									"pm.test('Checking response for GET \"books and writers\" view', function(){\r",
									"\r",
									"    // Precondition. Just to get assertion error\r",
									"    pm.expect(booksWriters).to.not.eql(undefined, \r",
									"    'missing response from a previous GET view'); \r",
									" \r",
									"    // A really shitty expect but still baseline\r",
									"    pm.expect(response).to.not.eql(booksWriters, \r",
									"    'view has not changed');\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/books_and_writers",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"books_and_writers"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "118c70af-d730-40f5-a1ed-2023b201604b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2284f3ef-fbd0-4806-a323-1eddcc66a170",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "4a4722f1-7d3a-4a36-8e1c-8b8dee8b1bcc",
			"key": "collectionLastWriterID",
			"value": "-1",
			"type": "string"
		},
		{
			"id": "aa890b8f-6932-44e5-be9b-d272e679be95",
			"key": "allBooksInitialTotal",
			"value": "-1",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}